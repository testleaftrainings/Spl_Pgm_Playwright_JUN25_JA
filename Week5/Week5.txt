
1 How does Playwright handle file downloads?**
2: How do you wait for a download event?**
3: How can you verify the downloaded file contents or name?**
4. How do you capture and validate the file name being downloaded?
5. How do you download a file and save it to a custom path?
6. How do you assert the content of a downloaded .txt file?



1: How to automate file uploads using Playwright?**
2: Can you upload multiple files?**
3: How do you verify that a file was uploaded?**
4. How do you upload multiple files in Playwright?
5. How can you verify the uploaded file name on the page?
6. What if the file input is hidden or custom-styled?
7.How do you skip a test conditionally (e.g., based on browser)?
8.How do you run a test only for a specific tag or annotation?
9.How can you mark a flaky test using test annotations?



1: What is `storageState` in Playwright?**
2: How do you reuse login sessions between tests?**
3: What are the benefits of using `storageState`?**
4. How do you save storage state after login and reuse it in another test?



1: What are annotations like `test.skip`, `test.only`, `test.fixme`?**
2: When should you use annotations?**
3: Whatâ€™s the use of `test.describe.only`?**

1: What is `test.describe()` used for?**
2: Can you group tests using `describe` blocks?**
3: How do you apply hooks like `beforeEach` inside describe blocks?**
4. How do you group tests and apply beforeEach only to that group?
5. How can you use nested describe blocks?


read txt file :
================
test.only('file download using file downloader event',async({page})=>{

      await page.goto("https://freetestdata.com/document-files/doc/");
       
      const fileDownloader=page.waitForEvent("download")
      await page.locator('//span[text()="Select File & Download"]').first().click()
      const downloader=await fileDownloader;

      const aa=await downloader.saveAs(`${os.homedir()}/Downloads/${downloader.suggestedFilename()}`)
      
      expect(downloader.suggestedFilename()).toContain("doc")

      console.log(await downloader.path());
      
      const content=await fs.promises.readFile(await downloader.path(),"utf-8")
      
      console.log(content)
      expect(content).toContain("Lorem")


       



})


